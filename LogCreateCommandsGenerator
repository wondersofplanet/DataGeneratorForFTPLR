package datagenerator;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

public class CombinedLogGenerator {
    // Define constants for file paths and other configurable values
    private static final String INPUT_SERVERS_FILE = "inputServers.txt";
    private static final String CONNECTION_FILE = "connection.txt";
    private static final String LOG_FILES_COMMANDS_OUTPUT = "createLogFilesCommands.txt";
    private static final String FTP_LOG_MOVER_OUTPUT = "forFTPLogMover.txt";
    private static final String LOG_FILE_PATH = "/home/batman/";
    private static final String WINDOWS_LOG_FILE_PATH = "C:\\abc";
    private static final String APP_NAME = "appname";
    
    public static void main(String[] args) {
        generateLogFilesCommands();
        generateFTPLogMoverCommands();
    }

    private static void generateLogFilesCommands() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(INPUT_SERVERS_FILE));
            BufferedWriter writer = new BufferedWriter(new FileWriter(LOG_FILES_COMMANDS_OUTPUT));

            // Skip the first line
            reader.readLine();

            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.trim().isEmpty()) {
                    String server = line.trim();
                    // Extract last part of the server name
                    String[] parts = server.split("\\.");
                    String lastPart = parts[parts.length - 1];
                    // Generating timestamp
                    String timestamp = new SimpleDateFormat("MMM_dd").format(Calendar.getInstance().getTime());
                    String logFileName = APP_NAME + "_log_" + timestamp + "_" + lastPart;

                    writer.write(server + " echo Hello, the memory size of $(hostname -I) is $(awk '/MemTotal/ {print $2}' /proc/meminfo)\n");
                    writer.write(server + " nohup vmstat 5 >> " + logFileName + ".log &\n");
                }
            }

            reader.close();
            writer.close();

            System.out.println("Generated " + LOG_FILES_COMMANDS_OUTPUT + " successfully!");
        } catch (IOException e) {
            System.err.println("Error reading or writing files: " + e.getMessage());
        }
    }

    private static void generateFTPLogMoverCommands() {
        try {
            // Read inputServers.txt and store servers in a map
            Map<String, String> serversMap = new HashMap<>();
            BufferedReader serversReader = new BufferedReader(new FileReader(INPUT_SERVERS_FILE));
            String serversLine;
            // Skip the first line
            serversReader.readLine();
            while ((serversLine = serversReader.readLine()) != null) {
                if (!serversLine.trim().isEmpty()) {
                    serversMap.put(serversLine.trim(), "");
                }
            }
            serversReader.close();

            // Read connection.txt and validate each server's presence
            Map<String, String> connectionMap = new HashMap<>();
            BufferedReader connReader = new BufferedReader(new FileReader(CONNECTION_FILE));
            String connLine;
            // Skip the header line
            connReader.readLine();
            while ((connLine = connReader.readLine()) != null) {
                String[] connParts = connLine.split(",");
                String server = connParts[2];
                connectionMap.put(server, "");
                // Extract last part of the server name
                String[] parts = server.split("\\.");
                String lastPart = parts[parts.length - 1];
                // Generating timestamp
                String timestamp = new SimpleDateFormat("MMM_dd").format(Calendar.getInstance().getTime());
                String logFileName = APP_NAME + "_log_" + timestamp + "_" + lastPart;

                // Writing FTP log mover command
                BufferedWriter ftpWriter = new BufferedWriter(new FileWriter(FTP_LOG_MOVER_OUTPUT, true));
                ftpWriter.write(connParts[2] + "," + connParts[3] + "," + connParts[0] + "," + connParts[1] +
                        "," + LOG_FILE_PATH + logFileName + ".log," + WINDOWS_LOG_FILE_PATH + "\n");
                ftpWriter.close();

                // Update server status in serversMap
                serversMap.put(server, logFileName);
            }
            connReader.close();

            // Check if any servers in inputServers.txt are missing in connection.txt
            for (Map.Entry<String, String> entry : serversMap.entrySet()) {
                if (entry.getValue().isEmpty()) {
                    throw new RuntimeException("Error: Server details for " + entry.getKey() + " not found in " + CONNECTION_FILE);
                }
            }

            System.out.println("Generated " + FTP_LOG_MOVER_OUTPUT + " successfully!");
        } catch (IOException e) {
            System.err.println("Error reading or writing files: " + e.getMessage());
        }
    }
}
